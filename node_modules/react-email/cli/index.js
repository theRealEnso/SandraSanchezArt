#!/usr/bin/env node
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
// src/cli/index.ts
var import_commander = require("commander");
// package.json
var package_default = {
    name: "react-email",
    version: "2.0.0",
    description: "A live preview of your emails right in your browser.",
    bin: {
        email: "./cli/index.js"
    },
    scripts: {
        build: "tsup",
        dev: "tsup --watch",
        clean: "rm -rf dist",
        lint: "eslint . && tsc"
    },
    license: "MIT",
    repository: {
        type: "git",
        url: "https://github.com/resend/react-email.git",
        directory: "packages/react-email"
    },
    keywords: [
        "react",
        "email"
    ],
    engines: {
        node: ">=18.0.0"
    },
    dependencies: {
        "@radix-ui/colors": "1.0.1",
        "@radix-ui/react-collapsible": "1.0.3",
        "@radix-ui/react-popover": "1.0.6",
        "@radix-ui/react-slot": "1.0.2",
        "@radix-ui/react-toggle-group": "1.0.4",
        "@radix-ui/react-tooltip": "1.0.6",
        "@react-email/components": "0.0.14",
        "@react-email/render": "0.0.12",
        "@swc/core": "1.3.101",
        "@types/react": "^18.2.0",
        "@types/react-dom": "^18.2.0",
        "@types/webpack": "5.28.5",
        autoprefixer: "10.4.14",
        chalk: "4.1.2",
        chokidar: "3.5.3",
        clsx: "2.1.0",
        commander: "11.1.0",
        debounce: "2.0.0",
        esbuild: "0.19.11",
        "eslint-config-prettier": "9.0.0",
        "eslint-config-turbo": "1.10.12",
        "framer-motion": "10.17.4",
        glob: "10.3.4",
        "log-symbols": "4.1.0",
        "mime-types": "2.1.35",
        next: "14.0.5-canary.46",
        "normalize-path": "3.0.0",
        ora: "5.4.1",
        postcss: "8.4.32",
        "prism-react-renderer": "2.1.0",
        react: "^18.2.0",
        "react-dom": "^18.2.0",
        shelljs: "0.8.5",
        "socket.io": "4.7.3",
        "socket.io-client": "4.7.3",
        sonner: "1.3.1",
        "source-map-js": "1.0.2",
        "stacktrace-parser": "0.1.10",
        "tailwind-merge": "2.2.0",
        tailwindcss: "3.4.0",
        "tree-cli": "0.6.7",
        typescript: "5.1.6"
    },
    devDependencies: {
        "@types/fs-extra": "11.0.1",
        "@types/mime-types": "2.1.4",
        "@types/node": "20.10.4",
        "@types/normalize-path": "3.0.2",
        "@types/shelljs": "0.8.15",
        "@vercel/style-guide": "5.1.0",
        eslint: "8.50.0",
        tsup: "7.2.0",
        tsx: "4.7.0",
        vitest: "1.1.3",
        watch: "1.0.2"
    }
};
// src/cli/commands/dev.ts
var import_node_fs2 = __toESM(require("fs"));
// src/cli/utils/tree.ts
var import_tree_cli = __toESM(require("tree-cli"));
var tree = function() {
    var _ref = _async_to_generator(function(dir, depth) {
        var report;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, import_tree_cli.default)({
                            l: depth,
                            base: dir
                        })
                    ];
                case 1:
                    report = _state.sent().report;
                    return [
                        2,
                        report
                    ];
            }
        });
    });
    return function tree(dir, depth) {
        return _ref.apply(this, arguments);
    };
}();
// src/cli/utils/preview/setup-hot-reloading.ts
var import_node_path = __toESM(require("path"));
var import_socket = require("socket.io");
var import_chokidar = require("chokidar");
var import_debounce = __toESM(require("debounce"));
var setupHotreloading = function(devServer2, emailDirRelativePath) {
    var clients = [];
    var io = new import_socket.Server(devServer2);
    io.on("connection", function(client) {
        clients.push(client);
        client.on("disconnect", function() {
            clients = clients.filter(function(item) {
                return item !== client;
            });
        });
    });
    var watcher = (0, import_chokidar.watch)(emailDirRelativePath, {
        ignoreInitial: true,
        cwd: import_node_path.default.resolve(process.cwd()),
        // eslint-disable-next-line prefer-named-capture-group
        ignored: /(^|[/\\])\../
    });
    var exit = function() {
        void watcher.close();
    };
    process.on("SIGINT", exit);
    process.on("uncaughtException", exit);
    var changes = [];
    var reload = (0, import_debounce.default)(function() {
        clients.forEach(function(client) {
            client.emit("reload", changes);
        });
        changes = [];
    }, 150);
    watcher.on("all", function(event, filename) {
        var file = filename.split(import_node_path.default.sep);
        if (file.length === 0) {
            return;
        }
        changes.push({
            event: event,
            filename: filename
        });
        reload();
    });
    return watcher;
};
// src/cli/utils/preview/start-dev-server.ts
var import_node_path3 = __toESM(require("path"));
var import_node_http = __toESM(require("http"));
var import_node_url = __toESM(require("url"));
var import_next = __toESM(require("next"));
var import_ora = __toESM(require("ora"));
var import_log_symbols = __toESM(require("log-symbols"));
var import_chalk = __toESM(require("chalk"));
// src/cli/utils/close-ora-on-sigint.ts
var closeOraOnSIGNIT = function(spinner) {
    process.on("SIGINT", function() {
        spinner.stop();
    });
};
// src/cli/utils/preview/serve-static-file.ts
var import_node_path2 = __toESM(require("path"));
var import_node_fs = require("fs");
var import_mime_types = require("mime-types");
var serveStaticFile = function() {
    var _ref = _async_to_generator(function(res, parsedUrl, staticDirRelativePath) {
        var staticBaseDir, pathname, ext, fileAbsolutePath, doesFileExist, fileStat, fileData;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    staticBaseDir = import_node_path2.default.join(process.cwd(), staticDirRelativePath);
                    pathname = parsedUrl.pathname;
                    ext = import_node_path2.default.parse(pathname).ext;
                    fileAbsolutePath = import_node_path2.default.join(staticBaseDir, pathname);
                    doesFileExist = (0, import_node_fs.existsSync)(fileAbsolutePath);
                    if (!!doesFileExist) return [
                        3,
                        1
                    ];
                    res.statusCode = 404;
                    res.end("File ".concat(pathname, " not found!"));
                    return [
                        3,
                        4
                    ];
                case 1:
                    return [
                        4,
                        import_node_fs.promises.stat(fileAbsolutePath)
                    ];
                case 2:
                    fileStat = _state.sent();
                    if (fileStat.isDirectory()) {
                        fileAbsolutePath += "/index".concat(ext);
                    }
                    return [
                        4,
                        import_node_fs.promises.readFile(fileAbsolutePath)
                    ];
                case 3:
                    fileData = _state.sent();
                    res.setHeader("Content-type", (0, import_mime_types.lookup)(ext) || "text/plain");
                    res.end(fileData);
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function serveStaticFile(res, parsedUrl, staticDirRelativePath) {
        return _ref.apply(this, arguments);
    };
}();
// src/cli/utils/preview/get-env-variables-for-preview-app.ts
var import_path = __toESM(require("path"));
var getEnvVariablesForPreviewApp = function(relativePathToEmailsDirectory, cliPackageLocation, cwd) {
    return {
        NEXT_PUBLIC_EMAILS_DIR_RELATIVE_PATH: relativePathToEmailsDirectory,
        NEXT_PUBLIC_CLI_PACKAGE_LOCATION: cliPackageLocation,
        NEXT_PUBLIC_OS_PATH_SEPARATOR: import_path.default.sep,
        NEXT_PUBLIC_USER_PROJECT_LOCATION: cwd
    };
};
// src/cli/utils/preview/start-dev-server.ts
var devServer;
var safeAsyncServerListen = function(server, port) {
    return new Promise(function(resolve) {
        server.listen(port, function() {
            resolve({
                portAlreadyInUse: false
            });
        });
        server.on("error", function(e) {
            if (e.code === "EADDRINUSE") {
                resolve({
                    portAlreadyInUse: true
                });
            }
        });
    });
};
var isRunningBuilt = __filename.endsWith("cli/index.js");
var cliPacakgeLocation = isRunningBuilt ? import_node_path3.default.resolve(__dirname, "..") : import_node_path3.default.resolve(__dirname, "../../../..");
var startDevServer = function() {
    var _ref = _async_to_generator(function(emailsDirRelativePath, staticBaseDirRelativePath, port) {
        var portAlreadyInUse, nextPortToTry, spinner, timeBeforeNextReady, app, isNextReady, nextReadyPromise, nextHandleRequest, secondsToNextReady;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    devServer = import_node_http.default.createServer(function(req, res) {
                        if (!req.url) {
                            res.end(404);
                            return;
                        }
                        var parsedUrl = import_node_url.default.parse(req.url, true);
                        res.setHeader("Cache-Control", "no-cache, max-age=0, must-revalidate, no-store");
                        res.setHeader("Pragma", "no-cache");
                        res.setHeader("Expires", "-1");
                        try {
                            if (parsedUrl.path && parsedUrl.path.includes("static/") && !parsedUrl.path.includes("_next/static/")) {
                                void serveStaticFile(res, parsedUrl, staticBaseDirRelativePath);
                            } else if (!isNextReady) {
                                void nextReadyPromise.then(function() {
                                    return nextHandleRequest === null || nextHandleRequest === void 0 ? void 0 : nextHandleRequest(req, res, parsedUrl);
                                });
                            } else {
                                void (nextHandleRequest === null || nextHandleRequest === void 0 ? void 0 : nextHandleRequest(req, res, parsedUrl));
                            }
                        } catch (e) {
                            console.error("caught error", e);
                            res.writeHead(500);
                            res.end();
                        }
                    });
                    return [
                        4,
                        safeAsyncServerListen(devServer, port)
                    ];
                case 1:
                    portAlreadyInUse = _state.sent().portAlreadyInUse;
                    if (!portAlreadyInUse) {
                        console.log(import_chalk.default.greenBright("    React Email ".concat(package_default.version)));
                        console.log("    Running preview at:          http://localhost:".concat(port, "\n"));
                    } else {
                        nextPortToTry = port + 1;
                        console.warn(" ".concat(import_log_symbols.default.warning, " Port ").concat(port, " is already in use, trying ").concat(nextPortToTry));
                        return [
                            2,
                            startDevServer(emailsDirRelativePath, staticBaseDirRelativePath, nextPortToTry)
                        ];
                    }
                    devServer.on("close", /*#__PURE__*/ _async_to_generator(function() {
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    return [
                                        4,
                                        app.close()
                                    ];
                                case 1:
                                    _state.sent();
                                    return [
                                        2
                                    ];
                            }
                        });
                    }));
                    devServer.on("error", function(e) {
                        console.error(" ".concat(import_log_symbols.default.error, " preview server error: "), JSON.stringify(e));
                        process.exit(1);
                    });
                    spinner = (0, import_ora.default)({
                        text: "Getting react-email preview server ready...\n",
                        prefixText: " "
                    }).start();
                    closeOraOnSIGNIT(spinner);
                    timeBeforeNextReady = performance.now();
                    process.env = _object_spread({}, process.env, getEnvVariablesForPreviewApp(emailsDirRelativePath, cliPacakgeLocation, process.cwd()));
                    app = (0, import_next.default)({
                        // passing in env here does not get the environment variables there
                        dev: true,
                        hostname: "localhost",
                        port: port,
                        dir: cliPacakgeLocation
                    });
                    isNextReady = false;
                    nextReadyPromise = app.prepare();
                    return [
                        4,
                        nextReadyPromise
                    ];
                case 2:
                    _state.sent();
                    isNextReady = true;
                    nextHandleRequest = app.getRequestHandler();
                    secondsToNextReady = ((performance.now() - timeBeforeNextReady) / 1e3).toFixed(1);
                    spinner.stopAndPersist({
                        text: "Ready in ".concat(secondsToNextReady, "s\n"),
                        symbol: import_log_symbols.default.success
                    });
                    return [
                        2,
                        devServer
                    ];
            }
        });
    });
    return function startDevServer(emailsDirRelativePath, staticBaseDirRelativePath, port) {
        return _ref.apply(this, arguments);
    };
}();
var makeExitHandler = function(options) {
    return function(_codeOrSignal) {
        if (typeof devServer !== "undefined") {
            console.log("\nshutting down dev server");
            devServer.close();
            devServer = void 0;
        }
        if (options === null || options === void 0 ? void 0 : options.shouldKillProcess) {
            process.exit(options.killWithErrorCode ? 1 : 0);
        }
    };
};
process.on("exit", makeExitHandler());
process.on("SIGINT", makeExitHandler({
    shouldKillProcess: true,
    killWithErrorCode: false
}));
process.on("SIGUSR1", makeExitHandler({
    shouldKillProcess: true,
    killWithErrorCode: false
}));
process.on("SIGUSR2", makeExitHandler({
    shouldKillProcess: true,
    killWithErrorCode: false
}));
process.on("uncaughtException", makeExitHandler({
    shouldKillProcess: true,
    killWithErrorCode: true
}));
// src/cli/commands/dev.ts
var dev = function() {
    var _ref = _async_to_generator(function(param) {
        var emailsDirRelativePath, port, devServer2, error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    emailsDirRelativePath = param.dir, port = param.port;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    if (!import_node_fs2.default.existsSync(emailsDirRelativePath)) {
                        throw new Error("Missing ".concat(emailsDirRelativePath, " folder"));
                    }
                    return [
                        4,
                        startDevServer(emailsDirRelativePath, "./emails", // defualts to ./emails/static for the static files that are served to the preview
                        parseInt(port))
                    ];
                case 2:
                    devServer2 = _state.sent();
                    setupHotreloading(devServer2, emailsDirRelativePath);
                    return [
                        3,
                        4
                    ];
                case 3:
                    error = _state.sent();
                    console.log(error);
                    process.exit(1);
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function dev(_) {
        return _ref.apply(this, arguments);
    };
}();
// src/cli/commands/export.ts
var import_node_fs3 = __toESM(require("fs"));
var import_node_path4 = __toESM(require("path"));
var import_glob = require("glob");
var import_esbuild = require("esbuild");
var import_ora2 = __toESM(require("ora"));
var import_log_symbols2 = __toESM(require("log-symbols"));
var import_render = require("@react-email/render");
var import_normalize_path = __toESM(require("normalize-path"));
var import_shelljs = require("shelljs");
var exportTemplates = function() {
    var _ref = _async_to_generator(function(outDir, srcDir, options) {
        var spinner, allTemplates, buildResult, allBuiltTemplates, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, template, component, rendered, htmlPath, exception, err, staticDir, hasStaticDirectory, result, fileTree;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    spinner = (0, import_ora2.default)("Preparing files...\n").start();
                    closeOraOnSIGNIT(spinner);
                    allTemplates = import_glob.glob.sync((0, import_normalize_path.default)(import_node_path4.default.join(srcDir, "*.{tsx,jsx}")));
                    buildResult = (0, import_esbuild.buildSync)({
                        bundle: true,
                        entryPoints: allTemplates,
                        platform: "node",
                        format: "cjs",
                        jsx: "transform",
                        write: true,
                        outdir: outDir
                    });
                    if (buildResult.warnings.length > 0) {
                        console.warn(buildResult.warnings);
                    }
                    if (buildResult.errors.length > 0) {
                        spinner.stopAndPersist({
                            symbol: import_log_symbols2.default.error,
                            text: "Failed to build emails"
                        });
                        console.error(buildResult.errors);
                        throw new Error("esbuild bundling process for email templates:\n".concat(allTemplates.map(function(p) {
                            return "- ".concat(p);
                        }).join("\n")));
                    }
                    spinner.succeed();
                    allBuiltTemplates = import_glob.glob.sync((0, import_normalize_path.default)("".concat(outDir, "/*.js")), {
                        absolute: true
                    });
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        8,
                        9,
                        10
                    ]);
                    _iterator = allBuiltTemplates[Symbol.iterator]();
                    _state.label = 2;
                case 2:
                    if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                        3,
                        7
                    ];
                    template = _step.value;
                    _state.label = 3;
                case 3:
                    _state.trys.push([
                        3,
                        5,
                        ,
                        6
                    ]);
                    spinner.text = "rendering ".concat(template.split("/").pop());
                    spinner.render();
                    return [
                        4,
                        import(template)
                    ];
                case 4:
                    component = _state.sent();
                    rendered = (0, import_render.render)(component.default({}), options);
                    htmlPath = template.replace(".js", options.plainText ? ".txt" : ".html");
                    (0, import_node_fs3.writeFileSync)(htmlPath, rendered);
                    (0, import_node_fs3.unlinkSync)(template);
                    return [
                        3,
                        6
                    ];
                case 5:
                    exception = _state.sent();
                    spinner.stopAndPersist({
                        symbol: import_log_symbols2.default.error,
                        text: "failed when rendering ".concat(template.split("/").pop())
                    });
                    console.error(exception);
                    throw exception;
                case 6:
                    _iteratorNormalCompletion = true;
                    return [
                        3,
                        2
                    ];
                case 7:
                    return [
                        3,
                        10
                    ];
                case 8:
                    err = _state.sent();
                    _didIteratorError = true;
                    _iteratorError = err;
                    return [
                        3,
                        10
                    ];
                case 9:
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                    return [
                        7
                    ];
                case 10:
                    spinner.succeed("Rendered all files");
                    spinner.text = "Copying static files";
                    spinner.render();
                    staticDir = import_node_path4.default.join(srcDir, "static");
                    hasStaticDirectory = import_node_fs3.default.existsSync(staticDir);
                    if (hasStaticDirectory) {
                        result = (0, import_shelljs.cp)("-r", staticDir, import_node_path4.default.join(outDir, "static"));
                        if (result.code > 0) {
                            spinner.stopAndPersist({
                                symbol: import_log_symbols2.default.error,
                                text: "Failed to copy static files"
                            });
                            throw new Error("Something went wrong while copying the file to ".concat(outDir, "/static, ").concat(result.cat()));
                        }
                    }
                    spinner.succeed();
                    return [
                        4,
                        tree(outDir, 4)
                    ];
                case 11:
                    fileTree = _state.sent();
                    console.log(fileTree);
                    spinner.stopAndPersist({
                        symbol: import_log_symbols2.default.success,
                        text: "Successfully exported emails"
                    });
                    process.exit();
                    return [
                        2
                    ];
            }
        });
    });
    return function exportTemplates(outDir, srcDir, options) {
        return _ref.apply(this, arguments);
    };
}();
// src/cli/commands/build.ts
var import_node_fs5 = __toESM(require("fs"));
var import_node_path6 = __toESM(require("path"));
var import_ora3 = __toESM(require("ora"));
var import_shelljs2 = __toESM(require("shelljs"));
var import_node_child_process = require("child_process");
// src/actions/get-emails-directory-metadata.ts
var import_node_fs4 = __toESM(require("fs"));
var import_node_path5 = __toESM(require("path"));
var isFileAnEmail = function(fullPath) {
    var unixFullPath = fullPath.replaceAll(import_node_path5.default.sep, "/");
    if (/(\/|^)_[^/]*/.test(unixFullPath)) return false;
    var stat = import_node_fs4.default.statSync(fullPath);
    if (stat.isDirectory()) return false;
    var ext = import_node_path5.default.parse(fullPath).ext;
    if (![
        ".js",
        ".tsx",
        ".jsx"
    ].includes(ext)) return false;
    var fileContents = import_node_fs4.default.readFileSync(fullPath, "utf8");
    return /\bexport\s+default\b/gm.test(fileContents);
};
var mergeDirectoriesWithSubDirectories = function(emailsDirectoryMetadata) {
    var currentResultingMergedDirectory = emailsDirectoryMetadata;
    while(currentResultingMergedDirectory.emailFilenames.length === 0 && currentResultingMergedDirectory.subDirectories.length === 1){
        var onlySubDirectory = currentResultingMergedDirectory.subDirectories[0];
        currentResultingMergedDirectory = {
            subDirectories: onlySubDirectory.subDirectories,
            emailFilenames: onlySubDirectory.emailFilenames,
            absolutePath: onlySubDirectory.absolutePath,
            directoryName: import_node_path5.default.join(currentResultingMergedDirectory.directoryName, onlySubDirectory.directoryName)
        };
    }
    return currentResultingMergedDirectory;
};
var getEmailsDirectoryMetadata = function() {
    var _ref = _async_to_generator(function(absolutePathToEmailsDirectory) {
        var dirents, emailFilenames, subDirectories;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!import_node_fs4.default.existsSync(absolutePathToEmailsDirectory)) return [
                        2
                    ];
                    return [
                        4,
                        import_node_fs4.default.promises.readdir(absolutePathToEmailsDirectory, {
                            withFileTypes: true
                        })
                    ];
                case 1:
                    dirents = _state.sent();
                    emailFilenames = dirents.filter(function(dirent) {
                        return isFileAnEmail(import_node_path5.default.join(dirent.path, dirent.name));
                    }).map(function(dirent) {
                        return dirent.name;
                    });
                    return [
                        4,
                        Promise.all(dirents.filter(function(dirent) {
                            return dirent.isDirectory() && !dirent.name.startsWith("_") && dirent.name !== "static";
                        }).map(function(dirent) {
                            return getEmailsDirectoryMetadata(import_node_path5.default.join(dirent.path, dirent.name));
                        }))
                    ];
                case 2:
                    subDirectories = _state.sent();
                    return [
                        2,
                        mergeDirectoriesWithSubDirectories({
                            absolutePath: absolutePathToEmailsDirectory,
                            directoryName: absolutePathToEmailsDirectory.split(import_node_path5.default.sep).pop(),
                            emailFilenames: emailFilenames,
                            subDirectories: subDirectories
                        })
                    ];
            }
        });
    });
    return function getEmailsDirectoryMetadata(absolutePathToEmailsDirectory) {
        return _ref.apply(this, arguments);
    };
}();
// src/cli/commands/build.ts
var import_log_symbols3 = __toESM(require("log-symbols"));
var buildPreviewApp = function(absoluteDirectory) {
    return new Promise(function(resolve, reject) {
        var nextBuild = (0, import_node_child_process.spawn)("npm", [
            "run",
            "build"
        ], {
            cwd: absoluteDirectory
        });
        nextBuild.stdout.on("data", function(msg) {
            process.stdout.write(msg);
        });
        nextBuild.stderr.on("data", function(msg) {
            process.stderr.write(msg);
        });
        nextBuild.on("close", function(code) {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error("Unable to build the Next app and it exited with code: ".concat(code)));
            }
        });
    });
};
var setNextEnvironmentVariablesForBuild = function() {
    var _ref = _async_to_generator(function(builtPreviewAppPath) {
        var envVariables, nextConfigContents;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    envVariables = _object_spread_props(_object_spread({}, getEnvVariablesForPreviewApp("emails", "PLACEHOLDER", "PLACEHOLDER")), {
                        NEXT_PUBLIC_IS_BUILDING: "true"
                    });
                    nextConfigContents = "\nconst path = require('path');\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  env: {\n    ...".concat(JSON.stringify(envVariables), ",\n    NEXT_PUBLIC_USER_PROJECT_LOCATION: path.resolve(process.cwd(), '../'),\n    NEXT_PUBLIC_CLI_PACKAGE_LOCATION: process.cwd(),\n  },\n  // this is needed so that the code for building emails works properly\n  webpack: (\n    /** @type {import('webpack').Configuration & { externals: string[] }} */\n    config,\n    { isServer }\n  ) => {\n    if (isServer) {\n      config.externals.push('esbuild');\n    }\n\n    return config;\n  },\n  typescript: {\n    ignoreBuildErrors: true\n  },\n  eslint: {\n    ignoreDuringBuilds: true\n  },\n  experimental: {\n    webpackBuildWorker: true,\n    serverComponentsExternalPackages: [\n      '@react-email/components',\n      '@react-email/render',\n      '@react-email/tailwind',\n    ],\n  },\n}");
                    return [
                        4,
                        import_node_fs5.default.promises.writeFile(import_node_path6.default.resolve(builtPreviewAppPath, "./next.config.js"), nextConfigContents, "utf8")
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function setNextEnvironmentVariablesForBuild(builtPreviewAppPath) {
        return _ref.apply(this, arguments);
    };
}();
var getEmailSlugsFromEmailDirectory = function(emailDirectory, emailsDirectoryAbsolutePath) {
    var directoryPathRelativeToEmailsDirectory = emailDirectory.absolutePath.replace(emailsDirectoryAbsolutePath, "").trim();
    var slugs = [];
    emailDirectory.emailFilenames.forEach(function(filename) {
        return slugs.push(import_node_path6.default.join(directoryPathRelativeToEmailsDirectory, filename));
    });
    emailDirectory.subDirectories.forEach(function(directory) {
        var _slugs;
        (_slugs = slugs).push.apply(_slugs, _to_consumable_array(getEmailSlugsFromEmailDirectory(directory, emailsDirectoryAbsolutePath)));
    });
    return slugs;
};
var forceSSGForEmailPreviews = function() {
    var _ref = _async_to_generator(function(emailsDirPath, builtPreviewAppPath) {
        var emailDirectoryMetadata, parameters;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    return [
                        4,
                        getEmailsDirectoryMetadata(emailsDirPath)
                    ];
                case 1:
                    emailDirectoryMetadata = _state.sent();
                    parameters = getEmailSlugsFromEmailDirectory(emailDirectoryMetadata, emailsDirPath).map(function(slug) {
                        return {
                            slug: slug
                        };
                    });
                    return [
                        4,
                        import_node_fs5.default.promises.appendFile(import_node_path6.default.resolve(builtPreviewAppPath, "./src/app/preview/[slug]/page.tsx"), "\n\nexport async function generateStaticParams() { \n  return ".concat(JSON.stringify(parameters), ";\n}"), "utf8")
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function forceSSGForEmailPreviews(emailsDirPath, builtPreviewAppPath) {
        return _ref.apply(this, arguments);
    };
}();
var updatePackageJsonScripts = function() {
    var _ref = _async_to_generator(function(builtPreviewAppPath) {
        var packageJsonPath, packageJson, _;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    packageJsonPath = import_node_path6.default.resolve(builtPreviewAppPath, "./package.json");
                    _ = JSON.parse;
                    return [
                        4,
                        import_node_fs5.default.promises.readFile(packageJsonPath, "utf8")
                    ];
                case 1:
                    packageJson = _.apply(JSON, [
                        _state.sent()
                    ]);
                    packageJson.scripts.build = "next build";
                    packageJson.scripts.start = "next start";
                    return [
                        4,
                        import_node_fs5.default.promises.writeFile(packageJsonPath, JSON.stringify(packageJson), "utf8")
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function updatePackageJsonScripts(builtPreviewAppPath) {
        return _ref.apply(this, arguments);
    };
}();
var npmInstall = function() {
    var _ref = _async_to_generator(function(builtPreviewAppPath, packageManager) {
        return _ts_generator(this, function(_state) {
            return [
                2,
                new Promise(function(resolve, reject) {
                    import_shelljs2.default.exec("".concat(packageManager, " install --silent"), {
                        cwd: builtPreviewAppPath
                    }, function(code) {
                        if (code === 0) {
                            resolve();
                        } else {
                            reject(new Error("Unable to install the dependencies and it exited with code: ".concat(code)));
                        }
                    });
                })
            ];
        });
    });
    return function npmInstall(builtPreviewAppPath, packageManager) {
        return _ref.apply(this, arguments);
    };
}();
var build = function() {
    var _ref = _async_to_generator(function(param) {
        var emailsDirRelativePath, packageManager, spinner, emailsDirPath, staticPath, builtPreviewAppPath, builtStaticDirectory, error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    emailsDirRelativePath = param.dir, packageManager = param.packageManager;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        12,
                        ,
                        13
                    ]);
                    spinner = (0, import_ora3.default)({
                        text: "Starting build process...",
                        prefixText: "  "
                    }).start();
                    closeOraOnSIGNIT(spinner);
                    spinner.text = "Checking if emails folder exists";
                    if (!import_node_fs5.default.existsSync(emailsDirRelativePath)) {
                        throw new Error("Missing ".concat(emailsDirRelativePath, " folder"));
                    }
                    emailsDirPath = import_node_path6.default.join(process.cwd(), emailsDirRelativePath);
                    staticPath = import_node_path6.default.join(process.cwd(), "emails", "static");
                    builtPreviewAppPath = import_node_path6.default.join(process.cwd(), ".react-email");
                    if (!import_node_fs5.default.existsSync(builtPreviewAppPath)) return [
                        3,
                        3
                    ];
                    spinner.text = "Deleting pre-existent `.react-email` folder";
                    return [
                        4,
                        import_node_fs5.default.promises.rm(builtPreviewAppPath, {
                            recursive: true
                        })
                    ];
                case 2:
                    _state.sent();
                    _state.label = 3;
                case 3:
                    spinner.text = "Copying preview app from CLI to `.react-email`";
                    return [
                        4,
                        import_node_fs5.default.promises.cp(cliPacakgeLocation, builtPreviewAppPath, {
                            recursive: true,
                            filter: function(source) {
                                return !source.includes("/cli/") && !source.includes("/.next/") && !/\/node_modules\/?$/.test(source);
                            }
                        })
                    ];
                case 4:
                    _state.sent();
                    if (!import_node_fs5.default.existsSync(staticPath)) return [
                        3,
                        6
                    ];
                    spinner.text = "Copying `emails/static` folder into `.react-email/public/static`";
                    builtStaticDirectory = import_node_path6.default.resolve(builtPreviewAppPath, "./public/static");
                    return [
                        4,
                        import_node_fs5.default.promises.cp(staticPath, builtStaticDirectory, {
                            recursive: true
                        })
                    ];
                case 5:
                    _state.sent();
                    _state.label = 6;
                case 6:
                    spinner.text = "Setting Next environment variables for preview app to work properly";
                    return [
                        4,
                        setNextEnvironmentVariablesForBuild(builtPreviewAppPath)
                    ];
                case 7:
                    _state.sent();
                    spinner.text = "Setting server side generation for the email preview pages";
                    return [
                        4,
                        forceSSGForEmailPreviews(emailsDirPath, builtPreviewAppPath)
                    ];
                case 8:
                    _state.sent();
                    spinner.text = "Updating package.json's build and start scripts";
                    return [
                        4,
                        updatePackageJsonScripts(builtPreviewAppPath)
                    ];
                case 9:
                    _state.sent();
                    spinner.text = "Installing dependencies on `.react-email`";
                    return [
                        4,
                        npmInstall(builtPreviewAppPath, packageManager)
                    ];
                case 10:
                    _state.sent();
                    spinner.stopAndPersist({
                        text: "Successfully preapred `.react-email` for `next build`",
                        symbol: import_log_symbols3.default.success
                    });
                    return [
                        4,
                        buildPreviewApp(builtPreviewAppPath)
                    ];
                case 11:
                    _state.sent();
                    return [
                        3,
                        13
                    ];
                case 12:
                    error = _state.sent();
                    console.log(error);
                    process.exit(1);
                    return [
                        3,
                        13
                    ];
                case 13:
                    return [
                        2
                    ];
            }
        });
    });
    return function build(_) {
        return _ref.apply(this, arguments);
    };
}();
// src/cli/commands/start.ts
var import_node_fs6 = __toESM(require("fs"));
var import_node_path7 = __toESM(require("path"));
var import_node_child_process2 = require("child_process");
var start = function() {
    var _ref = _async_to_generator(function() {
        var usersProjectLocation, builtPreviewPath, nextStart;
        return _ts_generator(this, function(_state) {
            try {
                usersProjectLocation = process.cwd();
                builtPreviewPath = import_node_path7.default.resolve(usersProjectLocation, "./.react-email");
                if (!import_node_fs6.default.existsSync(builtPreviewPath)) {
                    throw new Error("Could not find `.react-email`, maybe you haven't ran `email build`?");
                }
                nextStart = (0, import_node_child_process2.spawn)("npm", [
                    "start"
                ], {
                    cwd: builtPreviewPath
                });
                nextStart.stdout.on("data", function(msg) {
                    process.stdout.write(msg);
                });
                nextStart.stderr.on("data", function(msg) {
                    process.stderr.write(msg);
                });
            } catch (error) {
                console.log(error);
                process.exit(1);
            }
            return [
                2
            ];
        });
    });
    return function start() {
        return _ref.apply(this, arguments);
    };
}();
// src/cli/index.ts
var PACKAGE_NAME = "react-email";
import_commander.program.name(PACKAGE_NAME).description("A live preview of your emails right in your browser").version(package_default.version);
import_commander.program.command("dev").description("Starts the preview email development app").option("-d, --dir <path>", "Directory with your email templates", "./emails").option("-p --port <port>", "Port to run dev server on", "3000").action(dev);
import_commander.program.command("build").description("Copies the preivew app for onto .react-email and builds it").option("-d, --dir <path>", "Directory with your email templates", "./emails").option("-p --packageManager <name>", "Package name to use on installation on `.react-email`", "npm").action(build);
import_commander.program.command("start").description('Runs the built preview app that is inside of ".react-email"').action(start);
import_commander.program.command("export").description("Build the templates to the `out` directory").option("--outDir <path>", "Output directory", "out").option("-p, --pretty", "Pretty print the output", false).option("-t, --plainText", "Set output format as plain text", false).option("-d, --dir <path>", "Directory with your email templates", "./emails").action(function(param) {
    var outDir = param.outDir, pretty = param.pretty, plainText = param.plainText, srcDir = param.dir;
    return exportTemplates(outDir, srcDir, {
        pretty: pretty,
        plainText: plainText
    });
});
import_commander.program.parse();
