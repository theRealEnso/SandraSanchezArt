{
  "version": 3,
  "sources": ["../../home/enso/Desktop/Web Development/React/SandraSanchezArt/netlify/functions/webhook.js"],
  "sourceRoot": "/tmp/tmp-36787-5faCrauo2FfM",
  "sourcesContent": ["exports.handler = async (event) => {\n    try {\n      if (event.httpMethod !== \"POST\") {\n        return {\n          statusCode: 405,\n          body: JSON.stringify({ error: \"Method Not Allowed\" }),\n        };\n      }\n  \n      // Process the webhook payload\n      const payload = JSON.parse(event.body);\n  \n      // Do something with the payload\n      console.log(\"Webhook received:\", payload);\n      if (endpointSecret) {\n        // Get the signature sent by Stripe\n        const signature = request.headers['stripe-signature'];\n        try {\n          event = stripe.webhooks.constructEvent(\n            request.body,\n            signature,\n            endpointSecret\n          );\n        } catch (err) {\n          console.log(`\u26A0\uFE0F  Webhook signature verification failed.`, err.message);\n          return response.sendStatus(400);\n        }\n      }\n    \n      // Handle the event\n      switch (event.type) {\n        case 'payment_intent.succeeded':\n          const paymentIntent = event.data.object;\n          console.log(`PaymentIntent for ${paymentIntent.amount} was successful!`);\n          console.log(paymentIntent);\n          // Then define and call a method to handle the successful payment intent.\n          // handlePaymentIntentSucceeded(paymentIntent);\n          break;\n        case 'payment_method.attached':\n          const paymentMethod = event.data.object;\n          // Then define and call a method to handle the successful attachment of a PaymentMethod.\n          // handlePaymentMethodAttached(paymentMethod);\n          console.log(paymentMethod)\n          break;\n        default:\n          // Unexpected event type\n          console.log(`Unhandled event type ${event.type}.`);\n      }\n  \n      // Return a response (optional)\n      return {\n        statusCode: 200,\n        body: JSON.stringify({ message: \"Webhook received successfully!\" }),\n      };\n    } catch (error) {\n      console.error(\"Webhook error:\", error);\n      return {\n        statusCode: 500,\n        body: JSON.stringify({\n          error: \"An error occurred while processing the webhook.\",\n        }),\n      };\n    }\n  };"],
  "mappings": ";AAAA,QAAQ,UAAU,OAAO,UAAU;AAC/B,MAAI;AACF,QAAI,MAAM,eAAe,QAAQ;AAC/B,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,MACtD;AAAA,IACF;AAGA,UAAM,UAAU,KAAK,MAAM,MAAM,IAAI;AAGrC,YAAQ,IAAI,qBAAqB,OAAO;AACxC,QAAI,gBAAgB;AAElB,YAAM,YAAY,QAAQ,QAAQ,kBAAkB;AACpD,UAAI;AACF,gBAAQ,OAAO,SAAS;AAAA,UACtB,QAAQ;AAAA,UACR;AAAA,UACA;AAAA,QACF;AAAA,MACF,SAAS,KAAK;AACZ,gBAAQ,IAAI,wDAA8C,IAAI,OAAO;AACrE,eAAO,SAAS,WAAW,GAAG;AAAA,MAChC;AAAA,IACF;AAGA,YAAQ,MAAM,MAAM;AAAA,MAClB,KAAK;AACH,cAAM,gBAAgB,MAAM,KAAK;AACjC,gBAAQ,IAAI,qBAAqB,cAAc,MAAM,kBAAkB;AACvE,gBAAQ,IAAI,aAAa;AAGzB;AAAA,MACF,KAAK;AACH,cAAM,gBAAgB,MAAM,KAAK;AAGjC,gBAAQ,IAAI,aAAa;AACzB;AAAA,MACF;AAEE,gBAAQ,IAAI,wBAAwB,MAAM,IAAI,GAAG;AAAA,IACrD;AAGA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,iCAAiC,CAAC;AAAA,IACpE;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,kBAAkB,KAAK;AACrC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
